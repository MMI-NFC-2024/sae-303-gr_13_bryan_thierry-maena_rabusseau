---

---

<div class="donuts-patrimoine p-4">
  <h3 class="text-xl font-semibold mb-4">
    Analyse des régions les moins dotées
  </h3>

  <!-- Filtres -->
  <div class="flex flex-wrap gap-4 mb-6">
    <!-- Filtre classement -->
    <div class="form-control">
      <label class="label">
        <span class="label-text">Classement des régions</span>
      </label>
      <select id="choix-filtre" class="select select-bordered w-full max-w-xs">
        <option value="Top 5">Top 5 des régions les moins dotées</option>
        <option value="Top 3">Top 3 des régions les moins dotées</option>
      </select>
    </div>

    <!-- Filtre métrique -->
    <div class="form-control">
      <label class="label">
        <span class="label-text">Métrique à afficher</span>
      </label>
      <div class="flex gap-2">
        <label class="cursor-pointer label">
          <input
            type="radio"
            name="metrique"
            value="Pourcentage"
            class="radio"
            checked
          />
          <span class="label-text ml-2">Pourcentage (%)</span>
        </label>
        <label class="cursor-pointer label">
          <input type="radio" name="metrique" value="Nombre" class="radio" />
          <span class="label-text ml-2">Nombre brut</span>
        </label>
      </div>
    </div>
  </div>

  <div
    id="donut-container"
    class="bg-base-200 rounded-lg p-4 min-h-96 flex items-center justify-center"
  >
    <span class="loading loading-spinner loading-lg"></span>
    <span class="ml-2">Chargement du graphique...</span>
  </div>
</div>

<script>
  import * as d3 from "d3";

  let basilicData, dataRegions;

  // Correspondance département -> région
  const departementToRegion = {
    "01": "Auvergne-Rhône-Alpes",
    "02": "Hauts-de-France",
    "03": "Auvergne-Rhône-Alpes",
    "04": "Provence-Alpes-Côte d'Azur",
    "05": "Provence-Alpes-Côte d'Azur",
    "06": "Provence-Alpes-Côte d'Azur",
    "07": "Auvergne-Rhône-Alpes",
    "08": "Grand Est",
    "09": "Occitanie",
    "10": "Grand Est",
    "11": "Occitanie",
    "12": "Occitanie",
    "13": "Provence-Alpes-Côte d'Azur",
    "14": "Normandie",
    "15": "Auvergne-Rhône-Alpes",
    "16": "Nouvelle-Aquitaine",
    "17": "Nouvelle-Aquitaine",
    "18": "Centre-Val de Loire",
    "19": "Nouvelle-Aquitaine",
    "21": "Bourgogne-Franche-Comté",
    "22": "Bretagne",
    "23": "Nouvelle-Aquitaine",
    "24": "Nouvelle-Aquitaine",
    "25": "Bourgogne-Franche-Comté",
    "26": "Auvergne-Rhône-Alpes",
    "27": "Normandie",
    "28": "Centre-Val de Loire",
    "29": "Bretagne",
    "30": "Occitanie",
    "31": "Occitanie",
    "32": "Occitanie",
    "33": "Nouvelle-Aquitaine",
    "34": "Occitanie",
    "35": "Bretagne",
    "36": "Centre-Val de Loire",
    "37": "Centre-Val de Loire",
    "38": "Auvergne-Rhône-Alpes",
    "39": "Bourgogne-Franche-Comté",
    "40": "Nouvelle-Aquitaine",
    "41": "Centre-Val de Loire",
    "42": "Auvergne-Rhône-Alpes",
    "43": "Auvergne-Rhône-Alpes",
    "44": "Pays de la Loire",
    "45": "Centre-Val de Loire",
    "46": "Occitanie",
    "47": "Nouvelle-Aquitaine",
    "48": "Occitanie",
    "49": "Pays de la Loire",
    "50": "Normandie",
    "51": "Grand Est",
    "52": "Grand Est",
    "53": "Pays de la Loire",
    "54": "Grand Est",
    "55": "Grand Est",
    "56": "Bretagne",
    "57": "Grand Est",
    "58": "Bourgogne-Franche-Comté",
    "59": "Hauts-de-France",
    "60": "Hauts-de-France",
    "61": "Normandie",
    "62": "Hauts-de-France",
    "63": "Auvergne-Rhône-Alpes",
    "64": "Nouvelle-Aquitaine",
    "65": "Occitanie",
    "66": "Occitanie",
    "67": "Grand Est",
    "68": "Grand Est",
    "69": "Auvergne-Rhône-Alpes",
    "70": "Bourgogne-Franche-Comté",
    "71": "Bourgogne-Franche-Comté",
    "72": "Pays de la Loire",
    "73": "Auvergne-Rhône-Alpes",
    "74": "Auvergne-Rhône-Alpes",
    "75": "Île-de-France",
    "76": "Normandie",
    "77": "Île-de-France",
    "78": "Île-de-France",
    "79": "Nouvelle-Aquitaine",
    "80": "Hauts-de-France",
    "81": "Occitanie",
    "82": "Occitanie",
    "83": "Provence-Alpes-Côte d'Azur",
    "84": "Provence-Alpes-Côte d'Azur",
    "85": "Pays de la Loire",
    "86": "Nouvelle-Aquitaine",
    "87": "Nouvelle-Aquitaine",
    "88": "Grand Est",
    "89": "Bourgogne-Franche-Comté",
    "90": "Bourgogne-Franche-Comté",
    "91": "Île-de-France",
    "92": "Île-de-France",
    "93": "Île-de-France",
    "94": "Île-de-France",
    "95": "Île-de-France",
    "2A": "Corse",
    "2B": "Corse",
  };

  const domTomCodes = [
    "971",
    "972",
    "973",
    "974",
    "975",
    "976",
    "977",
    "978",
    "984",
    "986",
    "987",
    "988",
  ];

  async function loadData() {
    basilicData = await d3.json("/src/assets/basilic_clean.json");

    // Agrégation par région
    const regionMap = new Map();

    basilicData.forEach((item) => {
      if (item.code_postal && item.code_postal !== "Code_Postal") {
        const codePostal = String(item.code_postal).trim();

        if (!/^\d{5}$/.test(codePostal)) return;

        const deptCode = codePostal.substring(0, 2);

        if (
          domTomCodes.some((domtom) =>
            codePostal.startsWith(domtom.substring(0, 2))
          )
        ) {
          return;
        }

        const region = departementToRegion[deptCode];
        if (region) {
          const count = regionMap.get(region) || 0;
          regionMap.set(region, count + 1);
        }
      }
    });

    // Conversion en tableau
    dataRegions = Array.from(regionMap, ([Region, Nombre_de_Lieux]) => ({
      Region,
      Nombre_de_Lieux,
    }));
  }

  function createDonut(
    choixFiltre = "Top 5",
    affichageMetrique = "Pourcentage"
  ) {
    try {
      // Tri croissant (moins dotées en premier)
      const data_sorted_asc = [...dataRegions].sort(
        (a, b) => a.Nombre_de_Lieux - b.Nombre_de_Lieux
      );

      // Filtrage selon le choix
      const topNumber = choixFiltre.includes("Top 3") ? 3 : 5;
      const data_filtrée_active = data_sorted_asc.slice(0, topNumber);

      const total_general = d3.sum(dataRegions, (d) => d.Nombre_de_Lieux);
      const total_groupe = d3.sum(
        data_filtrée_active,
        (d) => d.Nombre_de_Lieux
      );

      // Configuration D3 - RAYONS AGRANDIS
      const pie = d3
        .pie()
        .value((d) => d.Nombre_de_Lieux)
        .sort(null);
      const arcs = pie(data_filtrée_active);
      const outerRadius = 160; // Agrandi de 120 à 160
      const innerRadius = 80; // Agrandi de 50 à 80

      const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);
      const arcLabel = d3
        .arc()
        .innerRadius(outerRadius * 0.75)
        .outerRadius(outerRadius * 0.75);

      // SVG AGRANDI
      const svg = d3
        .create("svg")
        .attr("width", 900) // Agrandi de 800 à 900
        .attr("height", 550) // Agrandi de 450 à 550
        .attr("viewBox", [-450, -275, 900, 550]) // ViewBox ajustée
        .style("font-family", "sans-serif");

      const color = d3
        .scaleOrdinal()
        .domain(data_filtrée_active.map((d) => d.Region))
        .range(d3.schemeCategory10);

      // Titres - POSITIONS AJUSTÉES
      svg
        .append("text")
        .attr("x", 0)
        .attr("y", -240) // Ajusté de -200 à -240
        .attr("text-anchor", "middle")
        .attr("font-size", 18)
        .attr("font-weight", "bold")
        .text(`Analyse des ${choixFiltre}`);

      svg
        .append("text")
        .attr("x", 0)
        .attr("y", -220) // Ajusté de -180 à -220
        .attr("text-anchor", "middle")
        .attr("font-size", 12)
        .attr("fill", "#555")
        .text(
          `Répartition du nombre de lieux de patrimoine dans ce groupe de ${data_filtrée_active.length} régions.`
        );

      const g = svg.append("g");

      // Arcs
      g.selectAll("path")
        .data(arcs)
        .join("path")
        .attr("fill", (d) => color(d.data.Region))
        .attr("d", arc)
        .attr("stroke", "white")
        .attr("stroke-width", 2) // Légèrement plus épais
        .style("cursor", "pointer")
        .on("mouseover", function (event, d) {
          d3.select(this)
            .transition()
            .duration(150)
            .attr("transform", "scale(1.05)");
        })
        .on("mouseout", function () {
          d3.select(this)
            .transition()
            .duration(150)
            .attr("transform", "scale(1)");
        });

      // Étiquettes sur les arcs - TAILLE AGRANDIE
      svg
        .selectAll("text.label-arc")
        .data(
          arcs.filter((d) => d.data.Nombre_de_Lieux / total_general > 0.001)
        )
        .join("text")
        .attr("class", "label-arc")
        .attr("transform", (d) => `translate(${arcLabel.centroid(d)})`)
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 12) // Agrandi de 10 à 12
        .attr("font-weight", "600")
        .attr("fill", "white")
        .text((d) => {
          if (affichageMetrique === "Pourcentage") {
            return `${((d.data.Nombre_de_Lieux / total_general) * 100).toFixed(1)}%`;
          } else {
            return d.data.Nombre_de_Lieux.toLocaleString("fr-FR");
          }
        });

      // Texte central - TAILLES AGRANDIES
      const part_nationale = ((total_groupe / total_general) * 100).toFixed(1);

      svg
        .append("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 32) // Agrandi de 24 à 32
        .attr("font-weight", "bold")
        .attr("y", -15) // Légèrement ajusté
        .text(total_groupe.toLocaleString("fr-FR"));

      svg
        .append("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 14) // Agrandi de 12 à 14
        .attr("fill", "#444")
        .attr("y", 15)
        .text("Lieux dans le groupe");

      svg
        .append("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 12) // Agrandi de 10 à 12
        .attr("fill", "#888")
        .attr("y", 40) // Légèrement ajusté
        .text(`(${part_nationale}% du total national)`);

      // Légende - POSITION AJUSTÉE
      const legend = svg
        .append("g")
        .attr("transform", `translate(${outerRadius + 100}, ${-outerRadius})`); // Plus d'espace

      legend
        .selectAll("rect")
        .data(data_filtrée_active)
        .join("rect")
        .attr("x", 0)
        .attr("y", (d, i) => i * 22) // Plus d'espacement
        .attr("width", 14) // Légèrement plus grand
        .attr("height", 14)
        .attr("fill", (d) => color(d.Region));

      legend
        .selectAll("text")
        .data(data_filtrée_active)
        .join("text")
        .attr("x", 20)
        .attr("y", (d, i) => i * 22 + 10) // Ajusté avec l'espacement
        .attr("font-size", 12) // Agrandi de 11 à 12
        .attr("alignment-baseline", "middle")
        .text((d) => {
          const nombre = d.Nombre_de_Lieux.toLocaleString("fr-FR");
          const name =
            d.Region.length > 22 ? d.Region.slice(0, 22) + "…" : d.Region; // Plus de caractères
          return `${name} – ${nombre} lieux`;
        });

      const container = document.getElementById("donut-container");
      container.innerHTML = "";
      container.appendChild(svg.node());
      container.className = "donut-content";
    } catch (error) {
      console.error("Erreur:", error);
      document.getElementById("donut-container").innerHTML =
        `<div class="alert alert-error"><span>Erreur: ${error.message}</span></div>`;
    }
  }

  async function init() {
    await loadData();
    createDonut("Top 5", "Pourcentage");

    // Event listeners
    document.getElementById("choix-filtre").addEventListener("change", (e) => {
      const metrique = document.querySelector(
        'input[name="metrique"]:checked'
      ).value;
      createDonut(e.target.value, metrique);
    });

    document.querySelectorAll('input[name="metrique"]').forEach((radio) => {
      radio.addEventListener("change", (e) => {
        const filtre = document.getElementById("choix-filtre").value;
        createDonut(filtre, e.target.value);
      });
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
</script>
