---

---

<div class="donuts-patrimoine p-4">
  <h3 class="text-xl font-semibold mb-4">
    Analyse des régions les moins dotées
  </h3>

  <!-- Filtres compacts -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-4">
    <div class="form-control">
      <label class="label pb-1">
        <span class="label-text text-sm font-medium">Nombre de régions</span>
      </label>
      <select id="choix-filtre" class="select select-bordered select-sm">
        <option value="Top 5">Top 5 des régions les moins dotées</option>
        <option value="Top 3">Top 3 des régions les moins dotées</option>
      </select>
    </div>

    <div class="form-control">
      <label class="label pb-1">
        <span class="label-text text-sm font-medium">Affichage</span>
      </label>
      <div class="flex gap-4">
        <label class="cursor-pointer flex items-center gap-2">
          <input
            type="radio"
            name="metrique"
            value="Pourcentage"
            class="radio radio-sm"
            checked
          />
          <span class="text-sm">Pourcentage</span>
        </label>
        <label class="cursor-pointer flex items-center gap-2">
          <input
            type="radio"
            name="metrique"
            value="Nombre"
            class="radio radio-sm"
          />
          <span class="text-sm">Nombre</span>
        </label>
      </div>
    </div>
  </div>

  <div
    id="donut-container"
    class="bg-base-200 rounded-lg p-4 min-h-96 flex items-center justify-center"
  >
    <span class="loading loading-spinner loading-lg"></span>
    <span class="ml-2">Chargement du graphique...</span>
  </div>
</div>

<script>
  import * as d3 from "d3";

  let basilicData, dataRegions;

  // Correspondance département -> région (CORRIGÉE - il manquait le département 20)
  const departementToRegion = {
    "01": "Auvergne-Rhône-Alpes",
    "02": "Hauts-de-France",
    "03": "Auvergne-Rhône-Alpes",
    "04": "Provence-Alpes-Côte d'Azur",
    "05": "Provence-Alpes-Côte d'Azur",
    "06": "Provence-Alpes-Côte d'Azur",
    "07": "Auvergne-Rhône-Alpes",
    "08": "Grand Est",
    "09": "Occitanie",
    "10": "Grand Est",
    "11": "Occitanie",
    "12": "Occitanie",
    "13": "Provence-Alpes-Côte d'Azur",
    "14": "Normandie",
    "15": "Auvergne-Rhône-Alpes",
    "16": "Nouvelle-Aquitaine",
    "17": "Nouvelle-Aquitaine",
    "18": "Centre-Val de Loire",
    "19": "Nouvelle-Aquitaine",
    "20": "Corse", // AJOUT - Code postal 20xxx pour la Corse
    "21": "Bourgogne-Franche-Comté",
    "22": "Bretagne",
    "23": "Nouvelle-Aquitaine",
    "24": "Nouvelle-Aquitaine",
    "25": "Bourgogne-Franche-Comté",
    "26": "Auvergne-Rhône-Alpes",
    "27": "Normandie",
    "28": "Centre-Val de Loire",
    "29": "Bretagne",
    "30": "Occitanie",
    "31": "Occitanie",
    "32": "Occitanie",
    "33": "Nouvelle-Aquitaine",
    "34": "Occitanie",
    "35": "Bretagne",
    "36": "Centre-Val de Loire",
    "37": "Centre-Val de Loire",
    "38": "Auvergne-Rhône-Alpes",
    "39": "Bourgogne-Franche-Comté",
    "40": "Nouvelle-Aquitaine",
    "41": "Centre-Val de Loire",
    "42": "Auvergne-Rhône-Alpes",
    "43": "Auvergne-Rhône-Alpes",
    "44": "Pays de la Loire",
    "45": "Centre-Val de Loire",
    "46": "Occitanie",
    "47": "Nouvelle-Aquitaine",
    "48": "Occitanie",
    "49": "Pays de la Loire",
    "50": "Normandie",
    "51": "Grand Est",
    "52": "Grand Est",
    "53": "Pays de la Loire",
    "54": "Grand Est",
    "55": "Grand Est",
    "56": "Bretagne",
    "57": "Grand Est",
    "58": "Bourgogne-Franche-Comté",
    "59": "Hauts-de-France",
    "60": "Hauts-de-France",
    "61": "Normandie",
    "62": "Hauts-de-France",
    "63": "Auvergne-Rhône-Alpes",
    "64": "Nouvelle-Aquitaine",
    "65": "Occitanie",
    "66": "Occitanie",
    "67": "Grand Est",
    "68": "Grand Est",
    "69": "Auvergne-Rhône-Alpes",
    "70": "Bourgogne-Franche-Comté",
    "71": "Bourgogne-Franche-Comté",
    "72": "Pays de la Loire",
    "73": "Auvergne-Rhône-Alpes",
    "74": "Auvergne-Rhône-Alpes",
    "75": "Île-de-France",
    "76": "Normandie",
    "77": "Île-de-France",
    "78": "Île-de-France",
    "79": "Nouvelle-Aquitaine",
    "80": "Hauts-de-France",
    "81": "Occitanie",
    "82": "Occitanie",
    "83": "Provence-Alpes-Côte d'Azur",
    "84": "Provence-Alpes-Côte d'Azur",
    "85": "Pays de la Loire",
    "86": "Nouvelle-Aquitaine",
    "87": "Nouvelle-Aquitaine",
    "88": "Grand Est",
    "89": "Bourgogne-Franche-Comté",
    "90": "Bourgogne-Franche-Comté",
    "91": "Île-de-France",
    "92": "Île-de-France",
    "93": "Île-de-France",
    "94": "Île-de-France",
    "95": "Île-de-France",
    "2A": "Corse",
    "2B": "Corse",
  };

  const domTomCodes = [
    "971",
    "972",
    "973",
    "974",
    "975",
    "976",
    "977",
    "978",
    "984",
    "986",
    "987",
    "988",
  ];

  async function loadData() {
    basilicData = await d3.json("/assets/basilic_clean.json");

    // Agrégation par région
    const regionMap = new Map();
    let totalItems = 0;
    let validItems = 0;
    let codesPostauxIgnores = new Set();

    basilicData.forEach((item) => {
      totalItems++;

      if (item.code_postal && item.code_postal !== "Code_Postal") {
        const codePostal = String(item.code_postal).trim();

        if (!/^\d{5}$/.test(codePostal)) {
          codesPostauxIgnores.add(codePostal);
          return;
        }

        const deptCode = codePostal.substring(0, 2);

        if (
          domTomCodes.some((domtom) =>
            codePostal.startsWith(domtom.substring(0, 2))
          )
        ) {
          return; // Ignorer les DOM-TOM
        }

        const region = departementToRegion[deptCode];
        if (region) {
          validItems++;
          const count = regionMap.get(region) || 0;
          regionMap.set(region, count + 1);
        } else {
          console.log(
            `Département non mappé: ${deptCode} (code postal: ${codePostal})`
          );
        }
      }
    });

    // Conversion en tableau
    dataRegions = Array.from(regionMap, ([Region, Nombre_de_Lieux]) => ({
      Region,
      Nombre_de_Lieux,
    }));

    // Debug: affichons toutes les régions calculées
    console.log(`=== DEBUG LOADDATA ===`);
    console.log(`Total items traités: ${totalItems}`);
    console.log(`Items valides avec région: ${validItems}`);
    console.log(
      `Codes postaux ignorés (sample):`,
      Array.from(codesPostauxIgnores).slice(0, 10)
    );
    console.log("\n=== RÉGIONS DÉTECTÉES ===");

    // Trions pour voir les plus et moins dotées
    const regionsSorted = [...dataRegions].sort(
      (a, b) => b.Nombre_de_Lieux - a.Nombre_de_Lieux
    );
    regionsSorted.forEach((region, index) => {
      console.log(
        `${index + 1}. ${region.Region}: ${region.Nombre_de_Lieux} lieux`
      );
    });

    console.log("\n=== TOP 5 MOINS DOTÉES ===");
    const regionsAsc = [...dataRegions].sort(
      (a, b) => a.Nombre_de_Lieux - b.Nombre_de_Lieux
    );
    regionsAsc.slice(0, 5).forEach((region, index) => {
      console.log(
        `${index + 1}. ${region.Region}: ${region.Nombre_de_Lieux} lieux`
      );
    });
  }

  function createDonut(
    choixFiltre = "Top 5",
    affichageMetrique = "Pourcentage"
  ) {
    try {
      // Debug: Affichons toutes les régions triées pour vérifier
      console.log("Toutes les régions avec leur nombre de lieux:");
      const data_sorted_asc = [...dataRegions].sort(
        (a, b) => a.Nombre_de_Lieux - b.Nombre_de_Lieux
      );

      data_sorted_asc.forEach((region, index) => {
        console.log(
          `${index + 1}. ${region.Region}: ${region.Nombre_de_Lieux} lieux`
        );
      });

      // Filtrage selon le choix - Les régions avec le MOINS de lieux
      let data_filtrée_active;
      if (choixFiltre && choixFiltre.includes("Top 5")) {
        data_filtrée_active = data_sorted_asc.slice(0, 5); // Les 5 premières = les moins dotées
        console.log("Top 5 des régions les moins dotées sélectionnées:");
      } else if (choixFiltre && choixFiltre.includes("Top 3")) {
        data_filtrée_active = data_sorted_asc.slice(0, 3); // Les 3 premières = les moins dotées
        console.log("Top 3 des régions les moins dotées sélectionnées:");
      } else {
        data_filtrée_active = data_sorted_asc.slice(0, 5);
        console.log(
          "Top 5 par défaut des régions les moins dotées sélectionnées:"
        );
      }

      data_filtrée_active.forEach((region, index) => {
        console.log(
          `${index + 1}. ${region.Region}: ${region.Nombre_de_Lieux} lieux`
        );
      });

      const total_general = d3.sum(dataRegions, (d) => d.Nombre_de_Lieux);
      const total_groupe = d3.sum(
        data_filtrée_active,
        (d) => d.Nombre_de_Lieux
      );

      // Configuration D3 - RAYONS ADAPTÉS
      const pie = d3
        .pie()
        .value((d) => d.Nombre_de_Lieux)
        .sort(null);
      const arcs = pie(data_filtrée_active);
      const outerRadius = 120;
      const innerRadius = 60;

      const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);
      const arcLabel = d3
        .arc()
        .innerRadius(outerRadius * 0.75)
        .outerRadius(outerRadius * 0.75);

      // SVG avec taille adaptée pour la card
      const svg = d3
        .create("svg")
        .attr("width", "100%")
        .attr("height", "400")
        .attr("viewBox", [-300, -200, 600, 400])
        .style("max-width", "600px")
        .style("font-family", "sans-serif");

      const color = d3
        .scaleOrdinal()
        .domain(data_filtrée_active.map((d) => d.Region))
        .range(d3.schemeCategory10);

      // Titres - POSITIONS ADAPTÉES
      svg
        .append("text")
        .attr("x", 0)
        .attr("y", -180)
        .attr("text-anchor", "middle")
        .attr("font-size", 16)
        .attr("font-weight", "bold")
        .text(`Analyse des ${choixFiltre}`);

      svg
        .append("text")
        .attr("x", 0)
        .attr("y", -165)
        .attr("text-anchor", "middle")
        .attr("font-size", 11)
        .attr("fill", "#555")
        .text(
          `Répartition du nombre de lieux de patrimoine dans ce groupe de ${data_filtrée_active.length} régions.`
        );

      const g = svg.append("g");

      // Arcs
      g.selectAll("path")
        .data(arcs)
        .join("path")
        .attr("fill", (d) => color(d.data.Region))
        .attr("d", arc)
        .attr("stroke", "white")
        .attr("stroke-width", 2) // Légèrement plus épais
        .style("cursor", "pointer")
        .on("mouseover", function (event, d) {
          d3.select(this)
            .transition()
            .duration(150)
            .attr("transform", "scale(1.05)");
        })
        .on("mouseout", function () {
          d3.select(this)
            .transition()
            .duration(150)
            .attr("transform", "scale(1)");
        });

      // Étiquettes sur les arcs - TAILLE AGRANDIE
      svg
        .selectAll("text.label-arc")
        .data(
          arcs.filter((d) => d.data.Nombre_de_Lieux / total_general > 0.001)
        )
        .join("text")
        .attr("class", "label-arc")
        .attr("transform", (d) => `translate(${arcLabel.centroid(d)})`)
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 12) // Agrandi de 10 à 12
        .attr("font-weight", "600")
        .attr("fill", "white")
        .text((d) => {
          if (affichageMetrique === "Pourcentage") {
            return `${((d.data.Nombre_de_Lieux / total_general) * 100).toFixed(1)}%`;
          } else {
            return d.data.Nombre_de_Lieux.toLocaleString("fr-FR");
          }
        });

      // Texte central - TAILLES ADAPTÉES
      const part_nationale = ((total_groupe / total_general) * 100).toFixed(1);

      svg
        .append("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 24)
        .attr("font-weight", "bold")
        .attr("y", -8)
        .text(total_groupe.toLocaleString("fr-FR"));

      svg
        .append("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 12)
        .attr("fill", "#444")
        .attr("y", 10)
        .text("Lieux dans le groupe");

      svg
        .append("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("font-size", 10)
        .attr("fill", "#888")
        .attr("y", 25)
        .text(`(${part_nationale}% du total national)`);

      const container = document.getElementById("donut-container");
      if (!container) return;

      container.innerHTML = "";
      container.className = "p-2"; // Suppression du fond et réduction du padding

      // Ajout du SVG avec contraintes de taille
      const svgWrapper = document.createElement("div");
      svgWrapper.className = "w-full flex justify-center mb-2";
      svgWrapper.appendChild(svg.node());
      container.appendChild(svgWrapper);

      // Légende HTML compacte et lisible
      const legendContainer = document.createElement("div");
      legendContainer.className = "w-full max-w-sm mx-auto";

      const legendList = document.createElement("div");
      legendList.className = "space-y-1";

      data_filtrée_active.forEach((d) => {
        const item = document.createElement("div");
        item.className =
          "flex items-center justify-between py-2 border-b border-base-300 last:border-0";

        const left = document.createElement("div");
        left.className = "flex items-center gap-3";

        const dot = document.createElement("div");
        dot.className = "w-4 h-4 rounded flex-shrink-0";
        dot.style.backgroundColor = color(d.Region);

        const name = document.createElement("span");
        name.className = "font-medium text-sm";
        name.textContent =
          d.Region.length > 20 ? d.Region.slice(0, 20) + "…" : d.Region;

        left.appendChild(dot);
        left.appendChild(name);

        const right = document.createElement("div");
        right.className = "text-right";

        const count = document.createElement("div");
        count.className = "font-semibold text-sm";
        count.textContent = `${d.Nombre_de_Lieux} lieux`;

        const percentage = document.createElement("div");
        percentage.className = "text-xs text-base-content/70";
        const pct = ((d.Nombre_de_Lieux / total_general) * 100).toFixed(1);
        percentage.textContent = `${pct}% du national`;

        right.appendChild(count);
        right.appendChild(percentage);

        item.appendChild(left);
        item.appendChild(right);
        legendList.appendChild(item);
      });

      legendContainer.appendChild(legendList);
      container.appendChild(legendContainer);
    } catch (error) {
      console.error("Erreur:", error);
      document.getElementById("donut-container").innerHTML =
        `<div class="alert alert-error"><span>Erreur: ${error.message}</span></div>`;
    }
  }

  async function init() {
    await loadData();
    createDonut("Top 5", "Pourcentage");

    // Event listeners
    document.getElementById("choix-filtre").addEventListener("change", (e) => {
      const metrique = document.querySelector(
        'input[name="metrique"]:checked'
      ).value;
      createDonut(e.target.value, metrique);
    });

    document.querySelectorAll('input[name="metrique"]').forEach((radio) => {
      radio.addEventListener("change", (e) => {
        const filtre = document.getElementById("choix-filtre").value;
        createDonut(filtre, e.target.value);
      });
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
</script>
